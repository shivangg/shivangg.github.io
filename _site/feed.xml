<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Shivang Online</title>
    <description>Shivang's blog,use Jekyll and github pages.</description>
    <link>http://shivang.github.io/</link>
    <atom:link href="http://shivang.github.io/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Mon, 01 May 2017 17:35:07 +0530</pubDate>
    <lastBuildDate>Mon, 01 May 2017 17:35:07 +0530</lastBuildDate>
    <generator>Jekyll v3.2.1</generator>
    
      <item>
        <title>Test The Superpower!</title>
        <description>&lt;h2 id=&quot;intro-to-tdd-test-driven-development&quot;&gt;Intro to TDD: Test Driven Development&lt;/h2&gt;

&lt;p&gt;Finally, I was at a point in life where the only way forward was through writing (and then passing) the tests for the development. Two minutes into this thing
and I was thinking how was I even living without this magical superpower. 
Python was what I was writing my Conway’s Game of Life in. Finally, I had to write tests to see if the cells of the world were following the rules of the 0 player game. 
&lt;code&gt;unittest&lt;/code&gt; or &lt;code&gt;doctest&lt;/code&gt;? And what is that nose thing? &lt;/p&gt;

&lt;h3 id=&quot;write-testsred&quot;&gt;1. Write tests(RED):&lt;/h3&gt;

&lt;p&gt;Without writing a single line of code, get sorted about what will you be building. What objective will it try to accomplish? For different inputs, what should be the output. Write it down and you down with half the journey. Now, just use the &lt;code&gt;doctest&lt;/code&gt; syntax to put down these i/p and o/p for the test file. Running these will fail the tests(because you have not written any code yet!)&lt;/p&gt;

&lt;h3 id=&quot;write-development-codegreen&quot;&gt;2. Write development Code(GREEN):&lt;/h3&gt;
&lt;p&gt;Write the bare minimum to convert your failing (red) tests into passing ones (green). &lt;/p&gt;

&lt;h3 id=&quot;refactor-code&quot;&gt;3. Refactor Code&lt;/h3&gt;
&lt;p&gt;Convert your bare minimum into easily understandable (by you and others) code. &lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Go-Karts - Feel fast, are slow

747s - Feel slow, are fast


“Ship it!” - Feels fast, is slow

“Test + Document it!” - Feels slow, is fast.
&lt;/code&gt;&lt;/pre&gt;
</description>
        <pubDate>Mon, 13 Mar 2017 00:00:00 +0530</pubDate>
        <link>http://shivang.github.io/tests/doctest/unitest/python/update/2017/03/13/tdd.html</link>
        <guid isPermaLink="true">http://shivang.github.io/tests/doctest/unitest/python/update/2017/03/13/tdd.html</guid>
        
        
        <category>tests</category>
        
        <category>doctest</category>
        
        <category>unitest</category>
        
        <category>python</category>
        
        <category>update</category>
        
      </item>
    
      <item>
        <title>Intuitive Gesture Recognition</title>
        <description>&lt;h2 id=&quot;get-highly-configurable-gestures-for-ubuntu-1404&quot;&gt;Get Highly configurable gestures for Ubuntu 14.04&lt;/h2&gt;

&lt;p&gt;Touchegg turned out to be a great little tool for configuring custom gestures for the Ubuntu 14.04. Powerful gesture recognition with up to 5 finger taps, up to 4 finger rotations and 3 fingers pinches(as long as your touchpad allows). Make your gesture recognition mimic MacBook or make it even better than that; &lt;em&gt;choice is yours&lt;/em&gt; .  Quick search took me to an article where the author suggested to change the source of &lt;code&gt;unity&lt;/code&gt; and recompile it to disable the default gesture recognition of Unity. Followed the instruction and away went my cursor :(&lt;/p&gt;

&lt;p&gt;After 2 sleepless nights, I decided to made a clean install, this time hoping to not make any foolish mistake. Someone suggested that Touchegg was working out-of-the-box without touching Unity. This was safe(quite) so I gave it a try. Simply ran,&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;sudo apt-get install touchegg
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;and made a configuration file at &lt;code&gt;~/.config/touchegg/touchegg.conf&lt;/code&gt;. This is the magic file to hold all my intuitive gestures.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-xml&quot;&gt;
&amp;lt;touchégg&amp;gt;
    &amp;lt;settings&amp;gt;
            &amp;lt;property name=&quot;composed_gestures_time&quot;&amp;gt;706&amp;lt;/property&amp;gt;
    &amp;lt;/settings&amp;gt;
    &amp;lt;application name=&quot;All&quot;&amp;gt;
            &amp;lt;gesture type=&quot;DRAG&quot; fingers=&quot;3&quot; direction=&quot;RIGHT&quot;&amp;gt;
                    &amp;lt;action type=&quot;SEND_KEYS&quot;&amp;gt;Control+Alt+Right&amp;lt;/action&amp;gt;
            &amp;lt;/gesture&amp;gt;
            &amp;lt;gesture type=&quot;DRAG&quot; fingers=&quot;3&quot; direction=&quot;LEFT&quot;&amp;gt;
                    &amp;lt;action type=&quot;SEND_KEYS&quot;&amp;gt;Control+Alt+Left&amp;lt;/action&amp;gt;
            &amp;lt;/gesture&amp;gt;
            &amp;lt;gesture type=&quot;DRAG&quot; fingers=&quot;3&quot; direction=&quot;UP&quot;&amp;gt;
                    &amp;lt;action type=&quot;MAXIMIZE_RESTORE_WINDOW&quot;&amp;gt;&amp;lt;/action&amp;gt;
            &amp;lt;/gesture&amp;gt;
            &amp;lt;gesture type=&quot;PINCH&quot; fingers=&quot;2&quot; direction=&quot;IN&quot;&amp;gt;
                    &amp;lt;action type=&quot;SEND_KEYS&quot;&amp;gt;Control+minus&amp;lt;/action&amp;gt;
            &amp;lt;/gesture&amp;gt;
            &amp;lt;gesture type=&quot;PINCH&quot; fingers=&quot;2&quot; direction=&quot;OUT&quot;&amp;gt;
                    &amp;lt;action type=&quot;SEND_KEYS&quot;&amp;gt;Control+equal&amp;lt;/action&amp;gt;
            &amp;lt;/gesture&amp;gt;
            &amp;lt;gesture type=&quot;DRAG&quot; fingers=&quot;4&quot; direction=&quot;DOWN&quot;&amp;gt;
                    &amp;lt;action type=&quot;SEND_KEYS&quot;&amp;gt;Super+s&amp;lt;/action&amp;gt;
            &amp;lt;/gesture&amp;gt;
            &amp;lt;gesture type=&quot;DRAG&quot; fingers=&quot;4&quot; direction=&quot;UP&quot;&amp;gt;
                    &amp;lt;action type=&quot;SEND_KEYS&quot;&amp;gt;Super+w&amp;lt;/action&amp;gt;
            &amp;lt;/gesture&amp;gt;
            &amp;lt;gesture type=&quot;DRAG&quot; fingers=&quot;3&quot; direction=&quot;DOWN&quot;&amp;gt;
                    &amp;lt;action type=&quot;MINIMIZE_WINDOW&quot;&amp;gt;&amp;lt;/action&amp;gt;
            &amp;lt;/gesture&amp;gt;
    &amp;lt;/application&amp;gt;
&amp;lt;/touchégg&amp;gt;

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The text in the file is self-explanatory if stressed. For eg: &lt;code&gt;SEND_KEYS&lt;/code&gt; is used to trigger a key combination when a particular gesture is made.&lt;/p&gt;

&lt;p&gt;To start touchegg as soon as the machine is turned on, make a file at path &lt;code&gt;~/.config/autostart/touchegg.desktop&lt;/code&gt; and add this to it:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[Desktop Entry]
Version=0.1
Name=Touchegg
GenericName=Touchégg
Comment=Touchégg Gestures Manager
Exec=/usr/bin/touchegg %u
Terminal=false
Type=Application


&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Later, I installed &lt;code&gt;Touchegg-GCE&lt;/code&gt; for easy configuring of the &lt;code&gt;touchegg.conf&lt;/code&gt; file.&lt;/p&gt;
</description>
        <pubDate>Sun, 05 Feb 2017 00:00:00 +0530</pubDate>
        <link>http://shivang.github.io/2017/02/05/gestureRecog.html</link>
        <guid isPermaLink="true">http://shivang.github.io/2017/02/05/gestureRecog.html</guid>
        
        
      </item>
    
      <item>
        <title>3 Steps (2 minutes) to Setup Your Personal Website with Jalpc</title>
        <description>&lt;p&gt;Everyone wants to have a personal website, you can display your infomation to public, post blogs and make friends. If you are CS engineer, haveing a self website will benefit your interview.&lt;/p&gt;

&lt;p&gt;So, if you like this website &lt;a href=&quot;https://jarrekk.github.io/Jalpc/&quot;&gt;https://jarrekk.github.io/Jalpc/&lt;/a&gt; or &lt;a href=&quot;http://www.jarrekk.com&quot;&gt;http://www.jarrekk.com&lt;/a&gt; and are willing to have a website, here is a way to build your website in 3 steps(2 minutes). Following are steps to setup your website(make sure you have basic knowledge of &lt;a href=&quot;https://jekyllrb.com/&quot;&gt;Jekyll&lt;/a&gt; and &lt;a href=&quot;https://pages.github.com/&quot;&gt;GitHub Pages&lt;/a&gt;, if you want to custom css/js &lt;a href=&quot;https://github.com/npm/npm&quot;&gt;NPM&lt;/a&gt; is needed):&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Fork &lt;a href=&quot;https://github.com/jarrekk/Jalpc&quot;&gt;this project – Jalpc&lt;/a&gt; at &lt;a href=&quot;https://github.com&quot;&gt;GitHub&lt;/a&gt;. If you want to edit website at github, do it as following gif or clone forked repository. &lt;code&gt;git clone git@github.com:github_username/Jalpc.git&lt;/code&gt;.&lt;/p&gt;

    &lt;p&gt;&lt;!-- ![edit](/jalpc/static/assets/img/blog/3steps/edit.gif) --&gt;
 &lt;img src=&quot;/jalpc/static/assets/img/blog/3steps/edit.gif&quot; width=&quot;75%&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Enter into repository directory and edit following file list:&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;
        &lt;p&gt;&lt;strong&gt;_config.yml&lt;/strong&gt;: edit ‘Website settings’, ‘author’, ‘comment’ and ‘analytics’ items.&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;&lt;strong&gt;_data/landing.yml&lt;/strong&gt;: custom sections of index page.&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;&lt;strong&gt;_data/index/&lt;/strong&gt;: edit sections’ data to yours at index page, please notice comment at each file.&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;&lt;strong&gt;_data/blog.yml&lt;/strong&gt;: edit navbar(categories) of blog page, if you have different/more blog page, copy &lt;code&gt;blog/python.html&lt;/code&gt; and change it to your category HTML file, and edit &lt;strong&gt;Python&lt;/strong&gt;, &lt;strong&gt;/python/&lt;/strong&gt; to your category name at items &lt;strong&gt;title&lt;/strong&gt; and &lt;strong&gt;permalink&lt;/strong&gt;, make sure title is the same as permalink but capitalized first letter(except HTML).&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;&lt;strong&gt;CNAME&lt;/strong&gt;: If you wanna release website at your own domain name: edit it and create &lt;code&gt;gh-pages&lt;/code&gt; branch; if you want to use &lt;em&gt;github_username.github.io&lt;/em&gt;: leave it blank.&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;Go to repo’s settings panel, config &lt;strong&gt;GitHub Pages&lt;/strong&gt; section to make sure website is released.&lt;/p&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Push changes to your github repository and view your website, done!&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;From now on, you can post your blog to this website by creating md files at &lt;code&gt;post/&lt;/code&gt; directory and push it to GitHub, you can clear files at this directory before you post blogs.&lt;/p&gt;

&lt;p&gt;If you like this repository, I appreciate you star this repository. Please don’t hesitate to mail me or post issues on GitHub if you have any questions. Hope you have a happy blog time!😊&lt;/p&gt;
</description>
        <pubDate>Tue, 31 Jan 2017 00:00:00 +0530</pubDate>
        <link>http://shivang.github.io/html/2017/01/31/3-steps-to-setup-website-with-Jalpc.html</link>
        <guid isPermaLink="true">http://shivang.github.io/html/2017/01/31/3-steps-to-setup-website-with-Jalpc.html</guid>
        
        <category>Jalpc</category>
        
        <category>Jekyll</category>
        
        
        <category>HTML</category>
        
      </item>
    
      <item>
        <title>To easily set up ML python libraries</title>
        <description>&lt;h2 id=&quot;install-ml-python-libraries-pycharm&quot;&gt;Install ML python libraries Pycharm&lt;/h2&gt;

&lt;p&gt;After some tinkering, I wasa finally able to pull this through. Maybe this is not the best way but this works for me. Steps : &lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Install Miniconda 3 using the miniconda3 executible for Windows.&lt;/li&gt;
  &lt;li&gt;Go to File =&amp;gt; Settings =&amp;gt; Project.&lt;/li&gt;
  &lt;li&gt;In the Project Interpreter box, give the path to the &lt;code&gt;python.exe&lt;/code&gt; in the folder where miniconda is installed.&lt;/li&gt;
  &lt;li&gt;Then run pip install &lt;em&gt;package&lt;/em&gt;&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;To run the python program do not use the console. Use the Run (&lt;code&gt;Ctrl+Shift+F10&lt;/code&gt;)&lt;/p&gt;

    &lt;p&gt;This should work after PyCharm indexes the files after some seconds.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Sun, 01 Jan 2017 00:00:00 +0530</pubDate>
        <link>http://shivang.github.io/2017/01/01/pyML-lib.html</link>
        <guid isPermaLink="true">http://shivang.github.io/2017/01/01/pyML-lib.html</guid>
        
        
      </item>
    
      <item>
        <title>Making Stepper Motor work with Polulu A4988 stepper translator</title>
        <description>&lt;h2 id=&quot;the-first-step&quot;&gt;The First Step&lt;/h2&gt;
&lt;p&gt;Basic step to successful working with stepper lies within the ability to find the correct configuration of the wires coming out of the stepper
motor.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;4 wire : Bipolar stepper motor&lt;/li&gt;
  &lt;li&gt;5 wire : Unipolar/Bipolar stepper motor&lt;/li&gt;
&lt;/ol&gt;

&lt;iframe width=&quot;420&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/fTtwWJZlGt4&quot; frameborder=&quot;0&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;

&lt;p&gt;This video will take you through the steps to successfully find the wire configuration of your stepper motor. After finding the wires
the battle is half won. Using a microcontroller just pass the series of &lt;strong&gt;HIGH&lt;/strong&gt; and &lt;strong&gt;LOWS&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;1000&lt;/strong&gt;
 &lt;strong&gt;0100&lt;/strong&gt;
 &lt;strong&gt;0010&lt;/strong&gt;
 &lt;strong&gt;0001&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;and you can make it move though this is a very bad practice. Its so baecause then the motor will draw a large current from your microcontroller
thus, &lt;em&gt;damaging&lt;/em&gt; it!. If we cannot power the motor from our microconroller, the only option left is external supply. but we can’t just connect
the external supply-&lt;em&gt;why?&lt;/em&gt; because we need to give the power to the motor in a particular fashion as shown in the above snipppet. So, what to do?
&lt;strong&gt;Solution&lt;/strong&gt; - Driver IC.&lt;/p&gt;

&lt;p&gt;The &lt;em&gt;sole&lt;/em&gt; purpose of a driver IC is to transfer current from the external supply to the motor on the command of the microcontroller. So, the microcontroller just tells the driver IC to power the motor according to the programmed code.&lt;/p&gt;

&lt;p&gt;The above snippet is to power the stepper in &lt;em&gt;One phase Stepping&lt;/em&gt; which is rarely used today. Recently, more stepping modes arae being used like&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Two phase stepping
&lt;img src=&quot;/images/twophaseStepping.gif&quot; alt=&quot;Two phase stepping graph&quot; /&gt;&lt;/li&gt;
  &lt;li&gt;Microstepping&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;To achieve such dedicated stepping modes, we have options of &lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Coding them on our own or finding suitable library to do our work.&lt;/li&gt;
  &lt;li&gt;Use an electronic stepping translator.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;Translator&lt;/strong&gt; is a device to simplify the task of stepping to as easy as just sending the pulses. Using this, there is no need to program the
stepping mode yourself; just pass the information to the translator about which mode you desire and let it do the rest. Now, just send out pulses to move the motor by the step in the mode you specified. &lt;em&gt;Polulu A4988&lt;/em&gt; is one such stepping translator.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/polulua4988.jpg&quot; alt=&quot;Polulu A4988&quot; /&gt;&lt;/p&gt;

&lt;p&gt;You can use it by &lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Connecting the correct stepping motor wires(the config of which you know now!) to the 1A/B and 2A/B.&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;Vdd&lt;/code&gt; to 5V microcontroller supply and &lt;code&gt;Vmot&lt;/code&gt; to external supply(respective &lt;em&gt;Gnd&lt;/em&gt; too).&lt;/li&gt;
  &lt;li&gt;Short &lt;code&gt;SLEEP&lt;/code&gt; and &lt;code&gt;RESET&lt;/code&gt; to make this easier to work and keep &lt;code&gt;ENABLE&lt;/code&gt; logic low to keep it functional.&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;DIRECTION&lt;/code&gt; is the key to way to rotate the motor is opposite directions for &lt;code&gt;HIGH&lt;/code&gt; and &lt;code&gt;LOW&lt;/code&gt; logic values.&lt;/li&gt;
  &lt;li&gt;Select &lt;code&gt;MS1&lt;/code&gt;,&lt;code&gt;MS2&lt;/code&gt; and &lt;code&gt;MS3&lt;/code&gt; to select the corect stepping mode. Keep all &lt;code&gt;LOW&lt;/code&gt; for one phse stepping.&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;STEP&lt;/code&gt;-give a pulse of reasonable duration to this pin to the motor move. Single pulse makes it move by single step.&lt;/li&gt;
&lt;/ol&gt;

</description>
        <pubDate>Sat, 26 Dec 2015 00:00:00 +0530</pubDate>
        <link>http://shivang.github.io/2015/12/26/stepper-motor.html</link>
        <guid isPermaLink="true">http://shivang.github.io/2015/12/26/stepper-motor.html</guid>
        
        
      </item>
    
      <item>
        <title>My Ethos</title>
        <description>&lt;h2 id=&quot;ethos&quot;&gt;ETHOS&lt;/h2&gt;

&lt;p&gt;Learn by doing things. &lt;strong&gt;True learning&lt;/strong&gt; can never be achieved in the captivation of the four walls of a classroom. Classroom teaching provides no hurdles to the learning process. Without any obstruction, there is no significant excitation of the parts of brain responsible for learning. Thus the student gets a false sense of learning. True learning can be achieved only by doing or making a product pertaining  to the concepts you are learning.&lt;/p&gt;

&lt;p&gt;This provides many challenges to the objective which the learner wants to achieve. In the process of overcoming this hurdle, significant part of the brain is activated leading to learning as well as &lt;strong&gt;long-term skill retention&lt;/strong&gt;.&lt;/p&gt;

</description>
        <pubDate>Sun, 12 Apr 2015 00:00:00 +0530</pubDate>
        <link>http://shivang.github.io/2015/04/12/my-ethos.html</link>
        <guid isPermaLink="true">http://shivang.github.io/2015/04/12/my-ethos.html</guid>
        
        
      </item>
    
      <item>
        <title>Finally started with Jekyll!</title>
        <description>&lt;h2 id=&quot;journey-of-starting-with-jekyll&quot;&gt;Journey of starting with Jekyll&lt;/h2&gt;

&lt;p&gt;So, after making up my mind to start blogging, I was particularly inclined 
towards &lt;strong&gt;Jekyll&lt;/strong&gt;, &lt;code&gt;a blog-aware static site generator&lt;/code&gt;. Installing it on linux wasnt a problem and had many guides and tutorials to
getting it installed by&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Installing Ruby&lt;/li&gt;
  &lt;li&gt;Installing NodeJS&lt;/li&gt;
  &lt;li&gt;Finally, installing Jekyll using the &lt;code&gt;gem&lt;/code&gt; command.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Easy, but my problem was to install it on Windows as I do have to regularly
switch to Windows for tasks I find easier there(MATLAB, LabView, tinkering with software only available in Windows, etc). I could 
again go the same course of installing everything on Windows too but that would be cumbersome(and repetetive too, not cool!).&lt;/p&gt;

&lt;p&gt;After exploring various options I had, I chose to download &lt;code&gt;portable Jekyll for Windows&lt;/code&gt;. Just clone this repo and we’re good to go! That’s it!
But this method did have its flaws with its incremental generation. Whats that? It is a feature using which Jekyll
autogenerates the site, if you make any changes in your code. Otherwise, you would have to restart the Jekyll server everytime
to view the effect of your changes. &lt;/p&gt;

&lt;p&gt;Its really easy to get going just after getting Jekyll. Just put your posts in the &lt;code&gt;_posts&lt;/code&gt; folder(folders really important ot Jekyll have _ 
bore their name). Only one thing to be really careful about-the naming convections for your posts.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;yyyy-dd-mm-the-name-of-post.md&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;After doing this, just write your posts in Markdown in this file. To finally view your post, navigate to the root of your site folder and
run &lt;code&gt;jekyll serve&lt;/code&gt; add &lt;code&gt;--incremental&lt;/code&gt; flag to get auto-regeneration. Now, just visit, &lt;code&gt;localhost:4000&lt;/code&gt; (see this in your terminal) in your browser to see your site up and running!&lt;/p&gt;

&lt;p&gt;So, finally its started. I’ll be blogging about everything that I will find was difficult to get through in the electrnics domain. &lt;code&gt;**Onto, the grand Line!**&lt;/code&gt;&lt;/p&gt;

</description>
        <pubDate>Wed, 12 Feb 2014 15:31:48 +0530</pubDate>
        <link>http://shivang.github.io/jekyll/update/2014/02/12/welcome-to-jekyll.html</link>
        <guid isPermaLink="true">http://shivang.github.io/jekyll/update/2014/02/12/welcome-to-jekyll.html</guid>
        
        
        <category>jekyll</category>
        
        <category>update</category>
        
      </item>
    
  </channel>
</rss>
